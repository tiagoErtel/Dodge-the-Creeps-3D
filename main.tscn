[gd_scene load_steps=15 format=3 uid="uid://cxbss06cw0s5"]

[ext_resource type="Script" uid="uid://bus2x3i4tucki" path="res://main.gd" id="1_h2yge"]
[ext_resource type="PackedScene" uid="uid://dhuqgth8nvvlc" path="res://player.tscn" id="1_ig7tw"]
[ext_resource type="PackedScene" uid="uid://duriaicwadra2" path="res://mob.tscn" id="2_h2yge"]
[ext_resource type="PackedScene" uid="uid://80ewgpyvif7b" path="res://hud.tscn" id="4_1bvp3"]
[ext_resource type="AudioStream" uid="uid://c5qpnfga41t4p" path="res://art/House In a Forest Loop.ogg" id="5_lquwl"]

[sub_resource type="BoxShape3D" id="BoxShape3D_7dm0k"]
size = Vector3(60, 2, 60)

[sub_resource type="Shader" id="Shader_lquwl"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_lquwl"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_7mycd"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_lquwl")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7mycd"]
render_priority = 0
shader = SubResource("Shader_lquwl")
shader_parameter/albedo = Color(0, 0.533333, 1, 0.258824)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_7mycd")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.4, 0.4, 0.4)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_ig7tw"]
material = SubResource("ShaderMaterial_7mycd")
size = Vector3(600, 6, 60)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_ig7tw"]
albedo_color = Color(1, 0, 0, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_ig7tw"]
material = SubResource("StandardMaterial3D_ig7tw")

[sub_resource type="Curve3D" id="Curve3D_lquwl"]
closed = true
_data = {
"points": PackedVector3Array(0, 0, 0, 0, 0, 0, -15.4045, 0, -23.7006, 0, 0, 0, 0, 0, 0, 15.4802, 0, -23.4745, 0, 0, 0, 0, 0, 0, 15.4791, 0, 16.448, 0, 0, 0, 0, 0, 0, -16.0663, 0, 16.2274),
"tilts": PackedFloat32Array(0, 0, 0, 0)
}
point_count = 4

[node name="Main" type="Node"]
script = ExtResource("1_h2yge")
mob_scene = ExtResource("2_h2yge")
player_scene = ExtResource("1_ig7tw")

[node name="Ground" type="StaticBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0)
collision_layer = 4
collision_mask = 0

[node name="CollisionShape3D" type="CollisionShape3D" parent="Ground"]
shape = SubResource("BoxShape3D_7dm0k")

[node name="MeshInstance3D" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -2, 0)
mesh = SubResource("BoxMesh_ig7tw")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 100, 0)
shadow_enabled = true

[node name="PlayerStartPosition" type="Marker3D" parent="."]

[node name="CameraPivot" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 19, 19)

[node name="Camera3D" type="Camera3D" parent="CameraPivot"]
projection = 1
size = 19.0

[node name="Cilinders" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.220612, 0, 0)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Cilinders"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 15.1612, 0, -23.3489)
mesh = SubResource("CylinderMesh_ig7tw")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="Cilinders"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -15.5238, 0, -23.3489)
mesh = SubResource("CylinderMesh_ig7tw")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="Cilinders"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -16.0071, 0, 16.48)
mesh = SubResource("CylinderMesh_ig7tw")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="Cilinders"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 15.1612, 0, 16.571)
mesh = SubResource("CylinderMesh_ig7tw")

[node name="SpawnPath" type="Path3D" parent="."]
curve = SubResource("Curve3D_lquwl")

[node name="SpawnLocation" type="PathFollow3D" parent="SpawnPath"]
transform = Transform3D(-0.00732049, 0, -0.999972, 0, 1, 0, 0.999972, 0, -0.00732049, -15.4045, 0, -23.7006)

[node name="MobTimer" type="Timer" parent="."]
wait_time = 0.5

[node name="HUD" parent="." instance=ExtResource("4_1bvp3")]

[node name="AudioStreamPlayer3D" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource("5_lquwl")
autoplay = true

[connection signal="timeout" from="MobTimer" to="." method="_on_mob_timer_timeout"]
